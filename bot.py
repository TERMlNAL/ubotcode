
# import asyncio
# import logging
# import sqlite3
# import os
# from aiogram import Bot, Dispatcher, types, Router, F
# from aiogram.types import (
#     ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
# )
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.filters import Command, StateFilter
# import openai
# from dotenv import load_dotenv
# from pydub import AudioSegment  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
# from io import BytesIO  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏

# # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
# load_dotenv()

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)

# # –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API
# API_TOKEN = os.getenv('API_TOKEN')
# OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
# PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
# SUPPORT_BOT_USERNAME = os.getenv('SUPPORT_BOT_USERNAME')  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# if not all([API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME]):
#     logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
#     exit(1)

# # **–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ True, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø –æ–ø–ª–∞—Ç—ã
# TESTING_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=API_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(storage=storage)
# router = Router()

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# openai.api_key = OPENAI_API_KEY

# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# class UserStates(StatesGroup):
#     selecting_tariff = State()
#     selecting_model = State()
#     purchasing_tariff = State()

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# conn = sqlite3.connect('users.db')
# cursor = conn.cursor()

# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# cursor.execute('''CREATE TABLE IF NOT EXISTS users
#                   (user_id INTEGER PRIMARY KEY,
#                    tariff TEXT,
#                    requests_left INTEGER,
#                    tokens_balance INTEGER DEFAULT 500,
#                    model TEXT,
#                    has_selected_model INTEGER DEFAULT 0)''')
# conn.commit()

# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ has_selected_model –≤ —Ç–∞–±–ª–∏—Ü–µ users
# cursor.execute("PRAGMA table_info(users)")
# columns = [column[1] for column in cursor.fetchall()]
# if 'has_selected_model' not in columns:
#     cursor.execute("ALTER TABLE users ADD COLUMN has_selected_model INTEGER DEFAULT 0")
#     conn.commit()

# # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
# cursor.execute("UPDATE users SET tariff='–ë–∞–∑–æ–≤—ã–π' WHERE tariff IS NULL OR tariff=''")
# conn.commit()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
# def initialize_user(user_id, tariff):
#     tariff_tokens = {
#         '–ë–∞–∑–æ–≤—ã–π': 1000,
#         '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 2000,
#         '–ü—Ä–µ–º–∏—É–º': 3000
#     }
#     tokens_to_add = tariff_tokens.get(tariff, 0)
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     if result:
#         tokens_balance = result[0] + tokens_to_add
#     else:
#         tokens_balance = tokens_to_add
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     cursor.execute("INSERT OR REPLACE INTO users (user_id, tariff, tokens_balance) VALUES (?, ?, ?)",
#                    (user_id, tariff, tokens_balance))
#     conn.commit()

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# async def check_user_access(user_id, required_tariff="–ë–∞–∑–æ–≤—ã–π"):
#     cursor.execute("SELECT tariff, tokens_balance FROM users WHERE user_id=?", (user_id,))
#     user = cursor.fetchone()
#     if user is None:
#         return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞'."
#     tariff, tokens_balance = user
#     if not tariff:
#         tariff = '–ë–∞–∑–æ–≤—ã–π'
#     tariffs_order = {"–ë–∞–∑–æ–≤—ã–π": 1, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 2, "–ü—Ä–µ–º–∏—É–º": 3}
#     if tokens_balance <= 0:
#         return False, "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
#     if tariffs_order.get(tariff, 0) < tariffs_order.get(required_tariff, 0):
#         return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."
#     return True, None

# # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
# async def update_tokens_balance(user_id, tokens_used):
#     cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     if result:
#         tokens_balance = result[0]
#         tokens_balance -= tokens_used
#         if tokens_balance < 0:
#             tokens_balance = 0
#         cursor.execute("UPDATE users SET tokens_balance=? WHERE user_id=?", (tokens_balance, user_id))
#         conn.commit()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# def detect_language(text):
#     if any('–∞' <= c <= '—è' or '–ê' <= c <= '–Ø' for c in text):
#         return 'ru'
#     else:
#         return 'en'

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏
# async def show_loading_animation(msg: types.Message, base_text: str):
#     await msg.edit_text(f"{base_text} .")
#     for _ in range(3):
#         for dots in ['.', '..', '...', '']:
#             try:
#                 await msg.edit_text(f"{base_text} {dots}")
#             except:
#                 pass
#             await asyncio.sleep(0.5)

# # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# # –£—Ä–æ–≤–µ–Ω—å 1
# level1_buttons = [
#     [KeyboardButton(text="üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"), KeyboardButton(text="üÜï –ù–æ–≤—ã–π —á–∞—Ç")],
#     [KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–æ–∫"), KeyboardButton(text="üíº –ü–æ–¥–ø–∏—Å–∫–∞")],
#     [KeyboardButton(text="‚ûï –ï—â–µ"), KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
# ]
# keyboard_level1 = ReplyKeyboardMarkup(
#     keyboard=level1_buttons,
#     resize_keyboard=True,
#     one_time_keyboard=False
# )

# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
# model_buttons = [
#     [KeyboardButton(text="üß† GPT-4o"), KeyboardButton(text="üß† GPT-4o-mini")],
#     [KeyboardButton(text="üß† o1-mini")],
#     [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
# ]
# keyboard_model_selection = ReplyKeyboardMarkup(
#     keyboard=model_buttons,
#     resize_keyboard=True,
#     one_time_keyboard=False
# )

# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
# tariff_buttons = [
#     [KeyboardButton(text="üìâ –ë–∞–∑–æ–≤—ã–π"), KeyboardButton(text="üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")],
#     [KeyboardButton(text="üèÜ –ü—Ä–µ–º–∏—É–º")],
#     [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
# ]
# keyboard_tariff_selection = ReplyKeyboardMarkup(
#     keyboard=tariff_buttons,
#     resize_keyboard=True,
#     one_time_keyboard=False
# )

# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–ò–Ω—Ñ–æ"
# tariff_buttons_with_info = [
#     [KeyboardButton(text="üìâ –ë–∞–∑–æ–≤—ã–π"), KeyboardButton(text="üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")],
#     [KeyboardButton(text="üèÜ –ü—Ä–µ–º–∏—É–º")],
#     [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
# ]
# keyboard_tariff_selection_with_info = ReplyKeyboardMarkup(
#     keyboard=tariff_buttons_with_info,
#     resize_keyboard=True,
#     one_time_keyboard=False
# )

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @router.message(Command('start'))
# async def cmd_start(message: Message, state: FSMContext):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
#     user = cursor.fetchone()

#     if TESTING_MODE:
#         # –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 500 —Ç–æ–∫–µ–Ω–æ–≤
#         cursor.execute("INSERT OR IGNORE INTO users (user_id, tokens_balance, tariff, has_selected_model) VALUES (?, ?, ?, ?)",
#                        (message.from_user.id, 500, '–ë–∞–∑–æ–≤—ã–π', 0))
#         conn.commit()
#         cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
#         user = cursor.fetchone()

#     if user is None:
#         # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 500 —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç–∞—Ä–∏—Ñ "–ë–∞–∑–æ–≤—ã–π"
#         cursor.execute("INSERT INTO users (user_id, tokens_balance, tariff, has_selected_model) VALUES (?, ?, ?, ?)",
#                        (message.from_user.id, 500, '–ë–∞–∑–æ–≤—ã–π', 0))
#         conn.commit()
#         await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.", reply_markup=keyboard_level1)
#     else:
#         await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=keyboard_level1)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
# @router.message(StateFilter(UserStates.selecting_tariff))
# async def process_tariff_selection(message: Message, state: FSMContext):
#     tariff = message.text
#     if tariff == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#         await state.clear()
#         return
#     if tariff not in ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "üèÜ –ü—Ä–µ–º–∏—É–º", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]:
#         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
#         await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#         await state.clear()
#         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
#         await handle_text(message, state)
#         return
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–ò–Ω—Ñ–æ"
#     if tariff == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
#         info_message = (
#             "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:**\n\n"
#             "üèÜ **–ü—Ä–µ–º–∏—É–º**:\n"
#             "- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤\n"
#             "- –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º\n"
#             "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
#             "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π**:\n"
#             "- 2000 —Ç–æ–∫–µ–Ω–æ–≤\n"
#             "- –î–æ—Å—Ç—É–ø –∫ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –º–æ–¥–µ–ª–µ–π\n"
#             "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç\n\n"
#             "üìâ **–ë–∞–∑–æ–≤—ã–π**:\n"
#             "- 1000 —Ç–æ–∫–µ–Ω–æ–≤\n"
#             "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º\n"
#             "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ FAQ"
#         )
#         await message.answer(info_message, parse_mode="Markdown", reply_markup=keyboard_tariff_selection_with_info)
#         return

#     # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ –±–µ–∑ —ç–º–æ–¥–∑–∏
#     tariff_clean = tariff.split(' ')[-1]
#     if TESTING_MODE:
#         initialize_user(message.from_user.id, tariff_clean)
#         await message.answer(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_clean}.", reply_markup=keyboard_level1)
#         await state.clear()
#     else:
#         # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
#         prices = {
#             '–ë–∞–∑–æ–≤—ã–π': [types.LabeledPrice(label='üìâ –ë–∞–∑–æ–≤—ã–π', amount=1000 * 100)],
#             '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': [types.LabeledPrice(label='üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', amount=2000 * 100)],
#             '–ü—Ä–µ–º–∏—É–º': [types.LabeledPrice(label='üèÜ –ü—Ä–µ–º–∏—É–º', amount=3000 * 100)],
#         }
#         await bot.send_invoice(
#             chat_id=message.chat.id,
#             title=f'–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}',
#             description=f'–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}',
#             payload=f'tariff_{tariff_clean}',
#             provider_token=PAYMENT_PROVIDER_TOKEN,
#             currency='RUB',
#             prices=prices[tariff_clean],
#             start_parameter='purchase_tariff',
#         )
#         await state.update_data(selected_tariff=tariff_clean)
#         await state.set_state(UserStates.purchasing_tariff)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥-–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
# @router.pre_checkout_query()
# async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
# @router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
# async def process_successful_payment(message: Message, state: FSMContext):
#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     data = await state.get_data()
#     tariff = data.get('selected_tariff')
#     if not tariff:
#         await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
#         return
#     # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ
#     initialize_user(message.from_user.id, tariff)
#     await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff}.", reply_markup=keyboard_level1)
#     await state.clear()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message(F.content_type == ContentType.TEXT)
# async def handle_text(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞—Ç–æ–∫"
#     if message.text == "üìä –û—Å—Ç–∞—Ç–æ–∫":
#         cursor.execute("SELECT tokens_balance, tariff FROM users WHERE user_id=?", (message.from_user.id,))
#         result = cursor.fetchone()
#         if result:
#             tokens_balance, tariff = result
#             await message.answer(
#                 f"üì¶ **–í–∞—à —Ç–∞—Ä–∏—Ñ:** {tariff}\n"
#                 f"üî¢ **–í–∞—à –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤:** {tokens_balance}\n\n"
#                 "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –¢–æ–∫–µ–Ω—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è.",
#                 parse_mode="Markdown",
#                 reply_markup=keyboard_level1
#             )
#         else:
#             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ.", reply_markup=keyboard_level1)
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞"
#     if message.text == "üíº –ü–æ–¥–ø–∏—Å–∫–∞":
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard_tariff_selection_with_info)
#         await state.set_state(UserStates.selecting_tariff)
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
#     if message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
#         await message.answer(f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @{SUPPORT_BOT_USERNAME}", reply_markup=keyboard_level1)
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ï—â–µ"
#     if message.text == "‚ûï –ï—â–µ":
#         await message.answer(
#             "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
#             "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n"
#             "- –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç / –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ\n"
#             "- –ò–ò –ê–≤–∞—Ç–∞—Ä—ã\n"
#             "- –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥ –∏ —Å—Ç–∞—Ç–µ–π\n"
#             "- –ï—â–µ –±–æ–ª–µ–µ 200 –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n\n"
#             "–¢–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à Pro –ø–æ—Ä—Ç–∞–ª [uonium.com](https://uonium.com)\n"
#             "–¢–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ.",
#             parse_mode="Markdown",
#             reply_markup=keyboard_level1
#         )
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"
#     if message.text == "üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏":
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard_model_selection)
#         await state.set_state(UserStates.selecting_model)
#         return

#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
#     if current_state == UserStates.selecting_model.state:
#         model_name = message.text
#         if model_name == "üîô –ù–∞–∑–∞–¥":
#             await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#             await state.clear()
#             return
#         if model_name not in ["üß† GPT-4o", "üß† GPT-4o-mini", "üß† o1-mini"]:
#             await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.", reply_markup=keyboard_model_selection)
#             return
#         model_mapping = {
#             "üß† GPT-4o": "gpt-4o",
#             "üß† GPT-4o-mini": "gpt-4o-mini",
#             "üß† o1-mini": "o1-mini"
#         }
#         model_id = model_mapping.get(model_name)

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ "o1-mini"
#         if model_id == "o1-mini":
#             has_access, error_message = await check_user_access(message.from_user.id, "–ü—Ä–µ–º–∏—É–º")
#             if not has_access:
#                 await message.answer("–ú–æ–¥–µ–ª—å 'o1-mini' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ '–ü—Ä–µ–º–∏—É–º'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.", reply_markup=keyboard_tariff_selection_with_info)
#                 await state.set_state(UserStates.selecting_tariff)
#                 return

#         # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å
#         cursor.execute("UPDATE users SET model=?, has_selected_model=1 WHERE user_id=?", (model_id, message.from_user.id))
#         conn.commit()
#         await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å {model_name}.", reply_markup=keyboard_level1)
#         await state.clear()
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π —á–∞—Ç"
#     if message.text == "üÜï –ù–æ–≤—ã–π —á–∞—Ç":
#         await state.update_data(conversation=[])
#         await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.", reply_markup=keyboard_level1)
#         return

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ–ª—å
#     cursor.execute("SELECT has_selected_model FROM users WHERE user_id=?", (message.from_user.id,))
#     result = cursor.fetchone()
#     has_selected_model = result[0] if result else 0
#     if not has_selected_model:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=keyboard_model_selection)
#         await state.set_state(UserStates.selecting_model)
#         return

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     has_access, error_message = await check_user_access(message.from_user.id)
#     if not has_access:
#         # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã
#         if error_message == "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.":
#             await message.answer("–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard_tariff_selection_with_info)
#             await state.set_state(UserStates.selecting_tariff)
#         else:
#             await message.answer(error_message)
#         return

#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     cursor.execute("SELECT model FROM users WHERE user_id=?", (message.from_user.id,))
#     result = cursor.fetchone()
#     model_id = result[0] if result else "o1-mini"

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ "o1-mini" –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
#     if model_id == "o1-mini":
#         has_access, error_message = await check_user_access(message.from_user.id, "–ü—Ä–µ–º–∏—É–º")
#         if not has_access:
#             await message.answer("–ú–æ–¥–µ–ª—å 'o1-mini' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ '–ü—Ä–µ–º–∏—É–º'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.", reply_markup=keyboard_tariff_selection_with_info)
#             await state.set_state(UserStates.selecting_tariff)
#             return

#     # –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#     image_triggers = [
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ",
#         "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ", "–º–Ω–µ –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
#         "–Ω–∞—Ä–∏—Å—É–π —Ñ–æ—Ç–æ", "–Ω–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞"
#     ]

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     if any(phrase in message.text.lower() for phrase in image_triggers):
#         if model_id == "o1-mini":
#             await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ 'o1-mini'.", reply_markup=keyboard_level1)
#             return
#         has_access, error_message = await check_user_access(message.from_user.id, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
#         if not has_access:
#             # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã
#             if error_message == "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.":
#                 await message.answer("–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard_tariff_selection_with_info)
#                 await state.set_state(UserStates.selecting_tariff)
#             else:
#                 await message.answer(error_message)
#             return

#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#         prompt = message.text

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
#         msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

#         try:
#             # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏
#             animation_task = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))

#             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å DALL-E 3
#             image_model = "dall-e-3"

#             # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#             response = await asyncio.to_thread(openai.Image.create,
#                                                prompt=prompt,
#                                                n=1,
#                                                size="1024x1024",
#                                                model=image_model)

#             # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
#             animation_task.cancel()

#             image_url = response['data'][0]['url']

#             await msg.delete()
#             await message.answer_photo(image_url, reply_markup=keyboard_level1)

#             # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
#             await update_tokens_balance(message.from_user.id, 100)

#         except openai.error.OpenAIError as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#             await msg.delete()
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_level1)

#         except Exception as e:
#             logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
#             await msg.delete()
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_level1)

#         return

#     # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–µ—Å–µ–¥—ã
#     data = await state.get_data()
#     conversation = data.get('conversation', [])

#     # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#     conversation.append({"role": "user", "content": message.text})

#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
#     user_language = detect_language(message.text)

#     # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –æ—Ç–≤–µ—Ç–∞
#     system_message = {
#         "role": "system",
#         "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
#     }

#     # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
#     conversation_with_system = [system_message] + conversation

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
#     msg = await message.answer("[–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞]")

#     try:
#         if model_id == "o1-mini":
#             # –°–ª–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏
#             loading_words = ["[–¥—É–º–∞—é]", "[–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é]", "[—Ä–µ—à–∞—é]"]

#             async def update_loading_words(msg):
#                 index = 0
#                 while True:
#                     word = loading_words[index % len(loading_words)]
#                     try:
#                         await msg.edit_text(word)
#                     except:
#                         pass
#                     index += 1
#                     await asyncio.sleep(0.7)

#             # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–ª–æ–≤
#             animation_task = asyncio.create_task(update_loading_words(msg))
#         else:
#             # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏
#             animation_task = asyncio.create_task(show_loading_animation(msg, "[–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞]"))

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#         response = await asyncio.to_thread(openai.ChatCompletion.create,
#                                            model=model_id,
#                                            messages=conversation_with_system)

#         # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
#         animation_task.cancel()

#         reply_text = response['choices'][0]['message']['content']

#         # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         conversation.append({"role": "assistant", "content": reply_text})

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         await state.update_data(conversation=conversation)

#         await msg.delete()
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         await message.answer(reply_text, reply_markup=keyboard_level1)

#         # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#         tokens_used = response['usage']['total_tokens']
#         await update_tokens_balance(message.from_user.id, tokens_used)

#     except openai.error.OpenAIError as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
#         await msg.delete()
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_level1)

#     except Exception as e:
#         logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
#         await msg.delete()
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_level1)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message(F.voice)
# async def handle_voice_message(message: Message, state: FSMContext):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     has_access, error_message = await check_user_access(message.from_user.id, required_tariff="–ü—Ä–µ–º–∏—É–º")
#     if not has_access:
#         await message.answer(
#             "üîí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
#             "—Å —Ç–∞—Ä–∏—Ñ–æ–º '–ü—Ä–µ–º–∏—É–º'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ "
#             "–∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
#             reply_markup=keyboard_tariff_selection_with_info
#         )
#         await state.set_state(UserStates.selecting_tariff)
#         return

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
#     cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (message.from_user.id,))
#     result = cursor.fetchone()
#     if result:
#         tokens_balance = result[0]
#         if tokens_balance <= 0:
#             await message.answer(
#                 "‚ùå –í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
#                 reply_markup=keyboard_tariff_selection_with_info
#             )
#             await state.set_state(UserStates.selecting_tariff)
#             return
#     else:
#         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ.", reply_markup=keyboard_level1)
#         return

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"
#     msg = await message.answer("[—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ]")

#     try:
#         # –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#         file_id = message.voice.file_id

#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
#         voice_file = BytesIO()
#         await bot.download(file_id, destination=voice_file)
#         voice_file.seek(0)

#         # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º OGG –≤ WAV —Ñ–æ—Ä–º–∞—Ç
#         audio = AudioSegment.from_file(voice_file, format="ogg")
#         wav_io = BytesIO()
#         audio.export(wav_io, format="wav")
#         wav_io.seek(0)

#         # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç name –∫ BytesIO –æ–±—ä–µ–∫—Ç—É
#         wav_io.name = "temp_audio.wav"

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
#         transcript = openai.Audio.transcribe("whisper-1", wav_io)

#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
#         recognized_text = transcript["text"]

#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
#         await show_loading_animation(msg, "[–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞]")


#         # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–µ—Å–µ–¥—ã
#         data = await state.get_data()
#         conversation = data.get('conversation', [])

#         # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         conversation.append({"role": "user", "content": recognized_text})

#         # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –æ—Ç–≤–µ—Ç–∞
#         system_message = {
#             "role": "system",
#             "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
#         }

#         # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
#         conversation_with_system = [system_message] + conversation

#         # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         cursor.execute("SELECT model FROM users WHERE user_id=?", (message.from_user.id,))
#         result = cursor.fetchone()
#         model_id = result[0] if result else "o1-mini"

#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#         response = await asyncio.to_thread(openai.ChatCompletion.create,
#                                            model=model_id,
#                                            messages=conversation_with_system)

#         reply_text = response['choices'][0]['message']['content']

#         # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         conversation.append({"role": "assistant", "content": reply_text})

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
#         await state.update_data(conversation=conversation)

#         await msg.delete()
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         await message.answer(reply_text, reply_markup=keyboard_level1)

#         # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#         tokens_used = response['usage']['total_tokens']
#         await update_tokens_balance(message.from_user.id, tokens_used)

#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#         await msg.delete()
#         await message.answer(
#             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_level1
#         )

# async def main():
#     # –í–∫–ª—é—á–∞–µ–º Router –≤ Dispatcher
#     dp.include_router(router)

#     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#     try:
#         await dp.start_polling(bot)
#     finally:
#         # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         conn.close()

# if __name__ == '__main__':
#     try:
#         asyncio.run(main())
#     except (KeyboardInterrupt, SystemExit):
#         logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")





# import asyncio
# import logging
# import os
# import sqlite3
# from aiogram import Bot, Dispatcher, types, Router, F
# from aiogram.types import ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.filters import Command, StateFilter
# import openai
# from dotenv import load_dotenv
# from pydub import AudioSegment
# from io import BytesIO

# # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# load_dotenv()

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME = (
#     os.getenv(key) for key in ['API_TOKEN', 'OPENAI_API_KEY', 'PAYMENT_PROVIDER_TOKEN', 'SUPPORT_BOT_USERNAME']
# )
# if not all([API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME]):
#     logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
#     exit(1)

# TESTING_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=API_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(storage=storage)
# router = Router()
# openai.api_key = OPENAI_API_KEY

# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# class UserStates(StatesGroup):
#     selecting_tariff = State()
#     selecting_model = State()
#     purchasing_tariff = State()

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# conn = sqlite3.connect('users.db')
# cursor = conn.cursor()
# cursor.execute('''
#     CREATE TABLE IF NOT EXISTS users (
#         user_id INTEGER PRIMARY KEY,
#         tariff TEXT DEFAULT '–ë–∞–∑–æ–≤—ã–π',
#         requests_left INTEGER,
#         tokens_balance INTEGER DEFAULT 500,
#         model TEXT,
#         has_selected_model INTEGER DEFAULT 0
#     )
# ''')
# conn.commit()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def initialize_user(user_id, tariff):
#     tariff_tokens = {'–ë–∞–∑–æ–≤—ã–π': 1000, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 2000, '–ü—Ä–µ–º–∏—É–º': 3000}
#     tokens_to_add = tariff_tokens.get(tariff, 0)
#     cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     if result:
#         tokens_balance = result[0] + tokens_to_add
#         cursor.execute("UPDATE users SET tariff=?, tokens_balance=? WHERE user_id=?", (tariff, tokens_balance, user_id))
#     else:
#         cursor.execute("""
#             INSERT INTO users (user_id, tariff, tokens_balance, has_selected_model) 
#             VALUES (?, ?, ?, 0)
#         """, (user_id, tariff, tokens_to_add))
#     conn.commit()

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# async def check_user_access(user_id, required_tariff="–ë–∞–∑–æ–≤—ã–π"):
#     cursor.execute("SELECT tariff, tokens_balance FROM users WHERE user_id=?", (user_id,))
#     user = cursor.fetchone()
#     if not user:
#         return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞'."
#     tariff, tokens = user
#     tariffs_order = {"–ë–∞–∑–æ–≤—ã–π": 1, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 2, "–ü—Ä–µ–º–∏—É–º": 3}
#     if tokens <= 0:
#         return False, "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
#     if tariffs_order.get(tariff, 0) < tariffs_order.get(required_tariff, 0):
#         return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."
#     return True, None

# # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
# async def update_tokens_balance(user_id, tokens_used):
#     cursor.execute("UPDATE users SET tokens_balance = tokens_balance - ? WHERE user_id=?", (tokens_used, user_id))
#     conn.commit()

# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
# def detect_language(text):
#     return 'ru' if any('–∞' <= c <= '—è' or '–ê' <= c <= '–Ø' for c in text) else 'en'

# # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
# async def show_loading_animation(msg: Message, base_text: str, dots=3, delay=0.5):
#     for _ in range(dots):
#         for i in range(dots + 1):
#             try:
#                 await msg.edit_text(f"{base_text} {'‚Ä¢' * i}")
#                 await asyncio.sleep(delay)
#             except:
#                 pass

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# def create_keyboard(buttons):
#     keyboard = [
#         [KeyboardButton(text=button) for button in row]
#         for row in buttons
#     ]
#     return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# keyboard_level1 = create_keyboard([
#     ["üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "üÜï –ù–æ–≤—ã–π —á–∞—Ç"],
#     ["üìä –û—Å—Ç–∞—Ç–æ–∫", "üíº –ü–æ–¥–ø–∏—Å–∫–∞"],
#     ["‚ûï –ï—â–µ", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
# ])

# keyboard_model_selection = create_keyboard([
#     ["üß† GPT-4o", "üß† GPT-4o-mini"],
#     ["üß† o1-mini"],
#     ["üîô –ù–∞–∑–∞–¥"]
# ])

# keyboard_tariff_selection = create_keyboard([
#     ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
#     ["üèÜ –ü—Ä–µ–º–∏—É–º"],
#     ["üîô –ù–∞–∑–∞–¥"]
# ])

# keyboard_tariff_info = create_keyboard([
#     ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
#     ["üèÜ –ü—Ä–µ–º–∏—É–º"],
#     ["‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üîô –ù–∞–∑–∞–¥"]
# ])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @router.message(Command('start'))
# async def cmd_start(message: Message, state: FSMContext):
#     cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
#     if not cursor.fetchone():
#         initial_tokens = 500 if TESTING_MODE else 500
#         cursor.execute("INSERT INTO users (user_id, tokens_balance, tariff) VALUES (?, ?, ?)", 
#                        (message.from_user.id, initial_tokens, '–ë–∞–∑–æ–≤—ã–π'))
#         conn.commit()
#         await message.answer(
#     "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n"
#     "**–£ –≤–∞—Å –µ—Å—Ç—å 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.**\n"
#     "**–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å –±–æ–ª—å—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º [–¢–∞—Ä–∏—Ñ–∞–º](https://telegra.ph/Tarify-09-16) –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.**\n"
#     "**[–ù–∞—à–∞ –æ—Ñ–µ—Ä—Ç–∞](https://telegra.ph/Oferta-09-16)**\n"
#     "**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!**",
#     parse_mode="Markdown",
#     reply_markup=keyboard_level1
# )

#     else:
#         await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=keyboard_level1)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
# @router.message(StateFilter(UserStates.selecting_tariff))
# async def process_tariff_selection(message: Message, state: FSMContext):
#     tariff = message.text
#     if tariff == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#         await state.clear()
#         return
#     if tariff == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
#         info_message = (
#             "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:**\n\n"
#             "üèÜ **–ü—Ä–µ–º–∏—É–º**:\n- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n- –í—Å–µ –º–æ–¥–µ–ª–∏\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n –°—Ç–æ–∏–º–æ—Å—Ç—å: 3 000 —Ä\n\n"
#             "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π**:\n- 2000 —Ç–æ–∫–µ–Ω–æ–≤\n- –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 500 —Ä\n\n"
#             "üìâ **–ë–∞–∑–æ–≤—ã–π**:\n- 1000 —Ç–æ–∫–µ–Ω–æ–≤\n- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ FAQ\n –°—Ç–æ–∏–º–æ—Å—Ç—å:  300 —Ä"
#         )
#         await message.answer(info_message, parse_mode="Markdown", reply_markup=keyboard_tariff_info)
#         return
#     if tariff not in ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "üèÜ –ü—Ä–µ–º–∏—É–º"]:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#         await state.clear()
#         return
#     tariff_clean = tariff.split(' ')[-1]
#     if TESTING_MODE:
#         initialize_user(message.from_user.id, tariff_clean)
#         await message.answer(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_clean}.", reply_markup=keyboard_level1)
#         await state.clear()
#     else:
#         prices = {
#             '–ë–∞–∑–æ–≤—ã–π': [types.LabeledPrice(label='üìâ –ë–∞–∑–æ–≤—ã–π', amount=1000 * 100)],
#             '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': [types.LabeledPrice(label='üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', amount=2000 * 100)],
#             '–ü—Ä–µ–º–∏—É–º': [types.LabeledPrice(label='üèÜ –ü—Ä–µ–º–∏—É–º', amount=3000 * 100)],
#         }
#         await bot.send_invoice(
#             chat_id=message.chat.id,
#             title=f'–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}',
#             description=f'–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}',
#             payload=f'tariff_{tariff_clean}',
#             provider_token=PAYMENT_PROVIDER_TOKEN,
#             currency='RUB',
#             prices=prices[tariff_clean],
#             start_parameter='purchase_tariff',
#         )
#         await state.update_data(selected_tariff=tariff_clean)
#         await state.set_state(UserStates.purchasing_tariff)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥-–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
# @router.pre_checkout_query()
# async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
# @router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
# async def process_successful_payment(message: Message, state: FSMContext):
#     data = await state.get_data()
#     tariff = data.get('selected_tariff')
#     if tariff:
#         initialize_user(message.from_user.id, tariff)
#         await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff}.", reply_markup=keyboard_level1)
#         await state.clear()
#     else:
#         await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", reply_markup=keyboard_level1)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message(F.content_type == ContentType.TEXT)
# async def handle_text(message: Message, state: FSMContext):
#     text = message.text
#     user_id = message.from_user.id
#     current_state = await state.get_state()

#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
#     if text == "üìä –û—Å—Ç–∞—Ç–æ–∫":
#         await show_balance(message)
#         return
#     elif text == "üíº –ü–æ–¥–ø–∏—Å–∫–∞":
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
#         await state.set_state(UserStates.selecting_tariff)
#         return
#     elif text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
#         await message.answer(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @{SUPPORT_BOT_USERNAME}", reply_markup=keyboard_level1)
#         return
#     elif text == "‚ûï –ï—â–µ":
#         await message.answer(
#             "–û—Ñ–µ—Ä—Ç–∞: https://telegra.ph/Oferta-09-16",
#             parse_mode="Markdown",
#             reply_markup=keyboard_level1
#         )
#         return
#     elif text == "üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏":
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard_model_selection)
#         await state.set_state(UserStates.selecting_model)
#         return
#     elif text == "üÜï –ù–æ–≤—ã–π —á–∞—Ç":
#         await state.update_data(conversation=[])
#         await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.", reply_markup=keyboard_level1)
#         return

#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
#     if current_state == UserStates.selecting_model.state:
#         await handle_model_selection(message, state, text)
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ–ª—å
#     cursor.execute("SELECT has_selected_model FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     if not result or not result[0]:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=keyboard_model_selection)
#         await state.set_state(UserStates.selecting_model)
#         return

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
#     access, error = await check_user_access(user_id)
#     if not access:
#         await handle_access_error(message, state, error)
#         return

#     # –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#     image_triggers = [
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ",
#         "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ", "–º–Ω–µ –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
#         "–Ω–∞—Ä–∏—Å—É–π —Ñ–æ—Ç–æ", "–Ω–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
#         "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞"
#     ]
#     if any(trigger in text.lower() for trigger in image_triggers):
#         await handle_image_generation(message, state, text)
#         return

#     # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
#     await handle_chat_response(message, state)

# # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
# async def show_balance(message: Message):
#     cursor.execute("SELECT tokens_balance, tariff FROM users WHERE user_id=?", (message.from_user.id,))
#     result = cursor.fetchone()
#     if result:
#         tokens, tariff = result
#         await message.answer(
#             f"üì¶ **–¢–∞—Ä–∏—Ñ:** {tariff}\nüî¢ **–¢–æ–∫–µ–Ω—ã:** {tokens}",
#             parse_mode="Markdown",
#             reply_markup=keyboard_level1
#         )
#     else:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ.", reply_markup=keyboard_level1)

# async def handle_access_error(message: Message, state: FSMContext, error_message: str):
#     if error_message == "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.":
#         await message.answer("–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
#         await state.set_state(UserStates.selecting_tariff)
#     else:
#         await message.answer(error_message)

# async def handle_model_selection(message: Message, state: FSMContext, model_name: str):
#     user_id = message.from_user.id
#     if model_name == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
#         await state.clear()
#         return
#     models = {"üß† GPT-4o": "gpt-4o", "üß† GPT-4o-mini": "gpt-4o-mini", "üß† o1-mini": "o1-mini"}
#     if model_name not in models:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å.", reply_markup=keyboard_model_selection)
#         return
#     model_id = models[model_name]
#     if model_id == "o1-mini":
#         access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
#         if not access:
#             await message.answer("–ú–æ–¥–µ–ª—å 'o1-mini' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ '–ü—Ä–µ–º–∏—É–º'.", reply_markup=keyboard_tariff_info)
#             await state.set_state(UserStates.selecting_tariff)
#             return
#     cursor.execute("UPDATE users SET model=?, has_selected_model=1 WHERE user_id=?", (model_id, user_id))
#     conn.commit()
#     await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å {model_name}.", reply_markup=keyboard_level1)
#     await state.clear()

# async def handle_image_generation(message: Message, state: FSMContext, prompt: str):
#     user_id = message.from_user.id
#     cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     model_id = result[0] if result else "o1-mini"
#     if model_id == "o1-mini":
#         await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ 'o1-mini'.", reply_markup=keyboard_level1)
#         return
#     access, error = await check_user_access(user_id, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
#     if not access:
#         await handle_access_error(message, state, error)
#         return
#     msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
#     try:
#         animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))
#         response = await asyncio.to_thread(openai.Image.create, prompt=prompt, n=1, size="1024x1024", model="dall-e-3")
#         animation.cancel()
#         image_url = response['data'][0]['url']
#         await msg.delete()
#         await message.answer_photo(image_url, reply_markup=keyboard_level1)
#         await update_tokens_balance(user_id, 100)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#         await msg.delete()
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard_level1)

# async def handle_chat_response(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     text = message.text
#     data = await state.get_data()
#     conversation = data.get('conversation', []) + [{"role": "user", "content": text}]
#     conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation
#     msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
#     cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     model_id = result[0] if result else "o1-mini"
#     try:
#         if model_id == "o1-mini":
#             animation = asyncio.create_task(show_loading_animation(msg, "[–¥—É–º–∞—é]", dots=3, delay=0.7))
#         else:
#             animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"))
#         response = await asyncio.to_thread(openai.ChatCompletion.create, model=model_id, messages=conversation_with_system)
#         animation.cancel()
#         reply = response['choices'][0]['message']['content']
#         conversation.append({"role": "assistant", "content": reply})
#         await state.update_data(conversation=conversation)
#         await msg.delete()
#         await message.answer(reply, reply_markup=keyboard_level1)
#         await update_tokens_balance(user_id, response['usage']['total_tokens'])
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
#         await msg.delete()
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=keyboard_level1)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message(F.voice)
# async def handle_voice_message(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
#     if not access:
#         await message.answer(
#             "üîí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è '–ü—Ä–µ–º–∏—É–º'.",
#             reply_markup=keyboard_tariff_info
#         )
#         await state.set_state(UserStates.selecting_tariff)
#         return
#     cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
#     result = cursor.fetchone()
#     tokens = result[0] if result else 0
#     if tokens <= 0:
#         await message.answer("‚ùå –¢–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
#         await state.set_state(UserStates.selecting_tariff)
#         return
#     msg = await message.answer("[—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ]")
#     try:
#         file = await bot.get_file(message.voice.file_id)
#         voice = await bot.download_file(file.file_path)
#         audio = AudioSegment.from_file(BytesIO(voice.read()), format="ogg")
#         wav_io = BytesIO()
#         audio.export(wav_io, format="wav")
#         wav_io.name = "temp_audio.wav"
#         transcript = await asyncio.to_thread(openai.Audio.transcribe, "whisper-1", wav_io)
#         recognized_text = transcript["text"]
#         await show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
#         data = await state.get_data()
#         conversation = data.get('conversation', []) + [{"role": "user", "content": recognized_text}]
#         conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation
#         cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
#         result = cursor.fetchone()
#         model_id = result[0] if result else "o1-mini"
#         response = await asyncio.to_thread(openai.ChatCompletion.create, model=model_id, messages=conversation_with_system)
#         reply = response['choices'][0]['message']['content']
#         conversation.append({"role": "assistant", "content": reply})
#         await state.update_data(conversation=conversation)
#         await msg.delete()
#         await message.answer(reply, reply_markup=keyboard_level1)
#         await update_tokens_balance(user_id, response['usage']['total_tokens'])
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
#         await msg.delete()
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=keyboard_level1)

#         # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def delete_user(user_id):
#     cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
#     conn.commit()

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id 7451063626
# delete_user(7451063626)


# async def main():
#     # –í–∫–ª—é—á–∞–µ–º Router –≤ Dispatcher
#     dp.include_router(router)

#     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#     try:
#         await dp.start_polling(bot)
#     finally:
#         # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#         conn.close()

# if __name__ == '__main__':
#     try:
#         asyncio.run(main())
#     except (KeyboardInterrupt, SystemExit):
#         logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")







import asyncio
import logging
import os
import sqlite3
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
import openai
from dotenv import load_dotenv
from pydub import AudioSegment
from io import BytesIO
import hashlib
from urllib.parse import urlencode
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME = (
    os.getenv(key) for key in ['API_TOKEN', 'OPENAI_API_KEY', 'PAYMENT_PROVIDER_TOKEN', 'SUPPORT_BOT_USERNAME']
)
if not all([API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME]):
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)

TESTING_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserStates(StatesGroup):
    selecting_tariff = State()
    selecting_model = State()
    purchasing_tariff = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        tariff TEXT DEFAULT '–ë–∞–∑–æ–≤—ã–π',
        requests_left INTEGER,
        tokens_balance INTEGER DEFAULT 500,
        model TEXT,
        has_selected_model INTEGER DEFAULT 0
    )
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payments
cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        inv_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        tariff TEXT,
        status TEXT
    )
''')

conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def initialize_user(user_id, tariff):
    tariff_tokens = {'–ë–∞–∑–æ–≤—ã–π': 1000, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 2000, '–ü—Ä–µ–º–∏—É–º': 3000}
    tokens_to_add = tariff_tokens.get(tariff, 0)
    cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if result:
        tokens_balance = result[0] + tokens_to_add
        cursor.execute("UPDATE users SET tariff=?, tokens_balance=? WHERE user_id=?", (tariff, tokens_balance, user_id))
    else:
        cursor.execute("""
            INSERT INTO users (user_id, tariff, tokens_balance, has_selected_model) 
            VALUES (?, ?, ?, 0)
        """, (user_id, tariff, tokens_to_add))
    conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_access(user_id, required_tariff="–ë–∞–∑–æ–≤—ã–π"):
    cursor.execute("SELECT tariff, tokens_balance FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    if not user:
        return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞'."
    tariff, tokens = user
    tariffs_order = {"–ë–∞–∑–æ–≤—ã–π": 1, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 2, "–ü—Ä–µ–º–∏—É–º": 3}
    if tokens <= 0:
        return False, "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
    if tariffs_order.get(tariff, 0) < tariffs_order.get(required_tariff, 0):
        return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."
    return True, None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def update_tokens_balance(user_id, tokens_used):
    cursor.execute("UPDATE users SET tokens_balance = tokens_balance - ? WHERE user_id=?", (tokens_used, user_id))
    conn.commit()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
def detect_language(text):
    return 'ru' if any('–∞' <= c <= '—è' or '–ê' <= c <= '–Ø' for c in text) else 'en'

# –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async def show_loading_animation(msg: Message, base_text: str, dots=3, delay=0.5):
    for _ in range(dots):
        for i in range(dots + 1):
            try:
                await msg.edit_text(f"{base_text} {'‚Ä¢' * i}")
                await asyncio.sleep(delay)
            except:
                pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboard(buttons):
    keyboard = [
        [KeyboardButton(text=button) for button in row]
        for row in buttons
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)



ROBOKASSA_MERCHANT_LOGIN = os.getenv('ROBOKASSA_MERCHANT_LOGIN')
ROBOKASSA_PASSWORD1 = os.getenv('ROBOKASSA_PASSWORD1')
ROBOKASSA_RESULT_URL = os.getenv('ROBOKASSA_RESULT_URL')
ROBOKASSA_SUCCESS_URL = os.getenv('ROBOKASSA_SUCCESS_URL')
ROBOKASSA_FAIL_URL = os.getenv('ROBOKASSA_FAIL_URL')

def generate_robokassa_link(out_sum, description, user_id):
    try:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        user_id_int = int(user_id)
        out_sum_float = float(out_sum)
        out_sum_str = f"{out_sum_float:.2f}"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logging.info(f"Generating payment for user_id: {user_id_int}, out_sum: {out_sum_float}, description: {description}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO payments (user_id, amount, tariff, status) VALUES (?, ?, ?, ?)", 
            (user_id_int, out_sum_float, description, 'pending')
        )
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º inv_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        inv_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        signature_string = f"{ROBOKASSA_MERCHANT_LOGIN}:{out_sum_str}:{inv_id}:{ROBOKASSA_PASSWORD1}"
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()

        params = {
            'MrchLogin': ROBOKASSA_MERCHANT_LOGIN,
            'OutSum': out_sum_str,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
            'InvId': inv_id,
            'Desc': description,
            'SignatureValue': signature,
            'Culture': 'ru',
            'Encoding': 'utf-8',
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã
            # 'Shp_user': user_id
        }

        url = f"https://auth.robokassa.ru/Merchant/Index.aspx?{urlencode(params)}"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
        logging.info(f"Generated Robokassa link: {url}")
        
        return url
    except Exception as e:
        logging.error(f"Error in generate_robokassa_link: {e}")
        raise



# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboard_level1 = create_keyboard([
    ["üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "üÜï –ù–æ–≤—ã–π —á–∞—Ç"],
    ["üìä –û—Å—Ç–∞—Ç–æ–∫", "üíº –ü–æ–¥–ø–∏—Å–∫–∞"],
    ["‚ûï –ï—â–µ", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
])

keyboard_model_selection = create_keyboard([
    ["üß† GPT-4o", "üß† GPT-4o-mini"],
    ["üß† o1-mini"],
    ["üîô –ù–∞–∑–∞–¥"]
])

keyboard_tariff_selection = create_keyboard([
    ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
    ["üèÜ –ü—Ä–µ–º–∏—É–º"],
    ["üîô –ù–∞–∑–∞–¥"]
])

keyboard_tariff_info = create_keyboard([
    ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
    ["üèÜ –ü—Ä–µ–º–∏—É–º"],
    ["‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üîô –ù–∞–∑–∞–¥"]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    if not cursor.fetchone():
        initial_tokens = 500 if TESTING_MODE else 500
        cursor.execute("INSERT INTO users (user_id, tokens_balance, tariff) VALUES (?, ?, ?)", 
                       (message.from_user.id, initial_tokens, '–ë–∞–∑–æ–≤—ã–π'))
        conn.commit()
        await message.answer(
    "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n"
    "**–£ –≤–∞—Å –µ—Å—Ç—å 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.**\n"
    "**–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å –±–æ–ª—å—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º [–¢–∞—Ä–∏—Ñ–∞–º](https://telegra.ph/Tarify-09-16) –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.**\n"
    "**[–ù–∞—à–∞ –æ—Ñ–µ—Ä—Ç–∞](https://telegra.ph/Oferta-09-16)**\n"
    "**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!**",
    parse_mode="Markdown",
    reply_markup=keyboard_level1
)

    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=keyboard_level1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@router.message(StateFilter(UserStates.selecting_tariff))
async def process_tariff_selection(message: Message, state: FSMContext):
    try:
        tariff = message.text
        logging.info(f"User {message.from_user.id} selected tariff: {tariff}")

        if tariff == "üîô –ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
            await state.clear()
            return
        
        if tariff == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
            info_message = (
                "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:**\n\n"
                "üèÜ **–ü—Ä–µ–º–∏—É–º**:\n- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n- –í—Å–µ –º–æ–¥–µ–ª–∏\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n –°—Ç–æ–∏–º–æ—Å—Ç—å: 3 000 —Ä\n\n"
                "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π**:\n- 2000 —Ç–æ–∫–µ–Ω–æ–≤\n- –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 500 —Ä\n\n"
                "üìâ **–ë–∞–∑–æ–≤—ã–π**:\n- 1000 —Ç–æ–∫–µ–Ω–æ–≤\n- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ FAQ\n –°—Ç–æ–∏–º–æ—Å—Ç—å:  300 —Ä"
            )
            await message.answer(info_message, parse_mode="Markdown", reply_markup=keyboard_tariff_info)
            return
        
        if tariff not in ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "üèÜ –ü—Ä–µ–º–∏—É–º"]:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
            await state.clear()
            return
        
        tariff_clean = tariff.split(' ')[-1]
        
        if TESTING_MODE:
            initialize_user(message.from_user.id, tariff_clean)
            await message.answer(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_clean}.", reply_markup=keyboard_level1)
            await state.clear()
        else:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
            tariff_prices = {
                '–ë–∞–∑–æ–≤—ã–π': 300,        # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 1500,
                '–ü—Ä–µ–º–∏—É–º': 3000
            }
            out_sum = tariff_prices.get(tariff_clean, 0)
            description = f'–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}'

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_link = generate_robokassa_link(out_sum, tariff_clean, message.from_user.id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ **{tariff_clean}** –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({payment_link}).",
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=keyboard_level1
            )
            await state.clear()
    except Exception as e:
        logging.error(f"Error in process_tariff_selection: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.content_type == ContentType.TEXT)
async def handle_text(message: Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìä –û—Å—Ç–∞—Ç–æ–∫":
        await show_balance(message)
        return
    elif text == "üíº –ü–æ–¥–ø–∏—Å–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
        await state.set_state(UserStates.selecting_tariff)
        return
    elif text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @{SUPPORT_BOT_USERNAME}", reply_markup=keyboard_level1)
        return
    elif text == "‚ûï –ï—â–µ":
        await message.answer(
            "–û—Ñ–µ—Ä—Ç–∞: https://telegra.ph/Oferta-09-16",
            parse_mode="Markdown",
            reply_markup=keyboard_level1
        )
        return
    elif text == "üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard_model_selection)
        await state.set_state(UserStates.selecting_model)
        return
    elif text == "üÜï –ù–æ–≤—ã–π —á–∞—Ç":
        await state.update_data(conversation=[])
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.", reply_markup=keyboard_level1)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    if current_state == UserStates.selecting_model.state:
        await handle_model_selection(message, state, text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ–ª—å
    cursor.execute("SELECT has_selected_model FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if not result or not result[0]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=keyboard_model_selection)
        await state.set_state(UserStates.selecting_model)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
    access, error = await check_user_access(user_id)
    if not access:
        await handle_access_error(message, state, error)
        return

    # –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_triggers = [
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ",
        "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ", "–º–Ω–µ –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–Ω–∞—Ä–∏—Å—É–π —Ñ–æ—Ç–æ", "–Ω–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞"
    ]
    if any(trigger in text.lower() for trigger in image_triggers):
        await handle_image_generation(message, state, text)
        return

    # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    await handle_chat_response(message, state)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def show_balance(message: Message):
    cursor.execute("SELECT tokens_balance, tariff FROM users WHERE user_id=?", (message.from_user.id,))
    result = cursor.fetchone()
    if result:
        tokens, tariff = result
        await message.answer(
            f"üì¶ **–¢–∞—Ä–∏—Ñ:** {tariff}\nüî¢ **–¢–æ–∫–µ–Ω—ã:** {tokens}",
            parse_mode="Markdown",
            reply_markup=keyboard_level1
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ.", reply_markup=keyboard_level1)

async def handle_access_error(message: Message, state: FSMContext, error_message: str):
    if error_message == "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.":
        await message.answer("–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
        await state.set_state(UserStates.selecting_tariff)
    else:
        await message.answer(error_message)

async def handle_model_selection(message: Message, state: FSMContext, model_name: str):
    user_id = message.from_user.id
    if model_name == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
        await state.clear()
        return
    models = {"üß† GPT-4o": "gpt-4o", "üß† GPT-4o-mini": "gpt-4o-mini", "üß† o1-mini": "o1-mini"}
    if model_name not in models:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å.", reply_markup=keyboard_model_selection)
        return
    model_id = models[model_name]
    if model_id == "o1-mini":
        access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
        if not access:
            await message.answer("–ú–æ–¥–µ–ª—å 'o1-mini' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ '–ü—Ä–µ–º–∏—É–º'.", reply_markup=keyboard_tariff_info)
            await state.set_state(UserStates.selecting_tariff)
            return
    cursor.execute("UPDATE users SET model=?, has_selected_model=1 WHERE user_id=?", (model_id, user_id))
    conn.commit()
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å {model_name}.", reply_markup=keyboard_level1)
    await state.clear()

async def handle_image_generation(message: Message, state: FSMContext, prompt: str):
    user_id = message.from_user.id
    cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    model_id = result[0] if result else "o1-mini"
    if model_id == "o1-mini":
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ 'o1-mini'.", reply_markup=keyboard_level1)
        return
    access, error = await check_user_access(user_id, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
    if not access:
        await handle_access_error(message, state, error)
        return
    msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))
        response = await asyncio.to_thread(openai.Image.create, prompt=prompt, n=1, size="1024x1024", model="dall-e-3")
        animation.cancel()
        image_url = response['data'][0]['url']
        await msg.delete()
        await message.answer_photo(image_url, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, 100)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard_level1)

async def handle_chat_response(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    data = await state.get_data()
    conversation = data.get('conversation', []) + [{"role": "user", "content": text}]
    conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation
    msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
    cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    model_id = result[0] if result else "o1-mini"
    try:
        if model_id == "o1-mini":
            animation = asyncio.create_task(show_loading_animation(msg, "[–¥—É–º–∞—é]", dots=3, delay=0.7))
        else:
            animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"))
        response = await asyncio.to_thread(openai.ChatCompletion.create, model=model_id, messages=conversation_with_system)
        animation.cancel()
        reply = response['choices'][0]['message']['content']
        conversation.append({"role": "assistant", "content": reply})
        await state.update_data(conversation=conversation)
        await msg.delete()
        await message.answer(reply, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, response['usage']['total_tokens'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=keyboard_level1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
    if not access:
        await message.answer(
            "üîí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è '–ü—Ä–µ–º–∏—É–º'.",
            reply_markup=keyboard_tariff_info
        )
        await state.set_state(UserStates.selecting_tariff)
        return
    cursor.execute("SELECT tokens_balance FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    tokens = result[0] if result else 0
    if tokens <= 0:
        await message.answer("‚ùå –¢–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_info)
        await state.set_state(UserStates.selecting_tariff)
        return
    msg = await message.answer("[—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ]")
    try:
        file = await bot.get_file(message.voice.file_id)
        voice = await bot.download_file(file.file_path)
        audio = AudioSegment.from_file(BytesIO(voice.read()), format="ogg")
        wav_io = BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.name = "temp_audio.wav"
        transcript = await asyncio.to_thread(openai.Audio.transcribe, "whisper-1", wav_io)
        recognized_text = transcript["text"]
        await show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
        data = await state.get_data()
        conversation = data.get('conversation', []) + [{"role": "user", "content": recognized_text}]
        conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation
        cursor.execute("SELECT model FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        model_id = result[0] if result else "o1-mini"
        response = await asyncio.to_thread(openai.ChatCompletion.create, model=model_id, messages=conversation_with_system)
        reply = response['choices'][0]['message']['content']
        conversation.append({"role": "assistant", "content": reply})
        await state.update_data(conversation=conversation)
        await msg.delete()
        await message.answer(reply, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, response['usage']['total_tokens'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=keyboard_level1)

#         # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def delete_user(user_id):
#     cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
#     conn.commit()

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id 7451063626
# delete_user(7451063626)


async def main():
    # –í–∫–ª—é—á–∞–µ–º Router –≤ Dispatcher
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")




