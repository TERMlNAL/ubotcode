import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.redis import RedisStorage
from dotenv import load_dotenv
from pydub import AudioSegment
from io import BytesIO
import hashlib
from urllib.parse import urlencode
import openai
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, BigInteger, Integer, String, Float, select, delete, update, text
from sqlalchemy import Column, DateTime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
SUPPORT_BOT_USERNAME = os.getenv('SUPPORT_BOT_USERNAME')
ROBOKASSA_MERCHANT_LOGIN = os.getenv('ROBOKASSA_MERCHANT_LOGIN')
ROBOKASSA_PASSWORD1 = os.getenv('ROBOKASSA_PASSWORD1')
ROBOKASSA_RESULT_URL = os.getenv('ROBOKASSA_RESULT_URL')
ROBOKASSA_SUCCESS_URL = os.getenv('ROBOKASSA_SUCCESS_URL')
ROBOKASSA_FAIL_URL = os.getenv('ROBOKASSA_FAIL_URL')

if not all([API_TOKEN, OPENAI_API_KEY, PAYMENT_PROVIDER_TOKEN, SUPPORT_BOT_USERNAME,
            ROBOKASSA_MERCHANT_LOGIN, ROBOKASSA_PASSWORD1, ROBOKASSA_RESULT_URL,
            ROBOKASSA_SUCCESS_URL, ROBOKASSA_FAIL_URL]):
    logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ API –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)

TESTING_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy –¥–ª—è PostgreSQL
DATABASE_URL = "postgresql+asyncpg://ubotuser:DBsazer1358@localhost/ubotdb"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å

engine = create_async_engine(DATABASE_URL, echo=False, pool_size=20, max_overflow=0)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
class User(Base):
    __tablename__ = 'users'
    user_id = Column(BigInteger, primary_key=True, index=True)
    tariff = Column(String, default='–ë–∞–∑–æ–≤—ã–π')
    requests_left = Column(Integer, nullable=True)
    tokens_balance = Column(Integer, default=500)
    model = Column(String)
    has_selected_model = Column(Integer, default=0)

class Payment(Base):
    __tablename__ = 'payments'
    inv_id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    user_id = Column(BigInteger)
    amount = Column(Float)
    tariff = Column(String)
    status = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å RedisStorage
storage = RedisStorage.from_url("redis://localhost")
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher(storage=storage)
openai.api_key = OPENAI_API_KEY

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserStates(StatesGroup):
    selecting_tariff = State()
    selecting_model = State()
    purchasing_tariff = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def initialize_user(user_id, tariff):
    tariff_tokens = {'–ë–∞–∑–æ–≤—ã–π': 1000, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 2000, '–ü—Ä–µ–º–∏—É–º': 3000}
    tokens_to_add = tariff_tokens.get(tariff, 0)
    logger.info(f"Initializing user {user_id} with tariff {tariff} and tokens {tokens_to_add}")
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.tariff = tariff
            user.tokens_balance += tokens_to_add
            logger.info(f"Updated user {user_id}: tariff={tariff}, tokens_balance={user.tokens_balance}")
        else:
            new_user = User(user_id=user_id, tariff=tariff, tokens_balance=tokens_to_add)
            session.add(new_user)
            logger.info(f"Added new user {user_id}: tariff={tariff}, tokens_balance={tokens_to_add}")
        await session.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_access(user_id, required_tariff="–ë–∞–∑–æ–≤—ã–π"):
    tariff_order = {"–ë–∞–∑–æ–≤—ã–π": 1, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 2, "–ü—Ä–µ–º–∏—É–º": 3}
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞'."
        if user.tokens_balance <= 0:
            return False, "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
        if tariff_order.get(user.tariff, 0) < tariff_order.get(required_tariff, 0):
            return False, "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."
        return True, None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def update_tokens_balance(user_id, tokens_used):
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            if user.tokens_balance - tokens_used < 0:
                logger.warning(f"User {user_id} attempted to use {tokens_used} tokens but has only {user.tokens_balance}")
                user.tokens_balance = 0
            else:
                user.tokens_balance -= tokens_used
            await session.commit()

# –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async def show_loading_animation(msg: Message, base_text: str, dots=3, delay=0.5):
    for _ in range(dots):
        for i in range(dots + 1):
            try:
                await msg.edit_text(f"{base_text} {'‚Ä¢' * i}")
                await asyncio.sleep(delay)
            except:
                pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboard(buttons):
    keyboard = [
        [KeyboardButton(text=button) for button in row]
        for row in buttons
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—É–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –≤–µ—Ä—Å–∏—è)
async def clear_old_payments():
    try:
        current_time = datetime.utcnow()
        logger.info(f"Current UTC time: {current_time}")
        async with SessionLocal() as session:
            expiration_query = text("""
                DELETE FROM payments 
                WHERE status = 'pending' 
                AND created_at < (NOW() - INTERVAL '1 hour')
            """)
            result = await session.execute(expiration_query)
            await session.commit()
            logger.info(f"Deleted {result.rowcount} old pending payments")
    except Exception as e:
        logger.error(f"Error clearing old pending payments: {e}")
async def generate_robokassa_link(out_sum, description, user_id):
    try:
        user_id_int = int(user_id)
        out_sum_float = float(out_sum)
        out_sum_str = f"{out_sum_float:.2f}"

        logger.info(f"Generating payment for user_id: {user_id_int}, out_sum: {out_sum_float}, description: {description}")

        async with SessionLocal() as session:
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ 'expired'
            await session.execute(
                update(Payment)
                .where(Payment.user_id == user_id_int, Payment.status == 'pending')
                .values(status='expired')
            )
            await session.commit()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
            new_payment = Payment(user_id=user_id_int, amount=out_sum_float, tariff=description, status='pending')
            session.add(new_payment)
            await session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å inv_id
            await session.refresh(new_payment)
            inv_id = new_payment.inv_id
            logger.info(f"Inserted payment for user_id: {user_id_int}, inv_id: {inv_id}, amount: {out_sum_float}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Robokassa
        signature_string = f"{ROBOKASSA_MERCHANT_LOGIN}:{out_sum_str}:{inv_id}:{ROBOKASSA_PASSWORD1}"
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Å—ã–ª–∫–∏ Robokassa
        params = {
            'MrchLogin': ROBOKASSA_MERCHANT_LOGIN,
            'OutSum': out_sum_str,
            'InvId': inv_id,
            'Desc': description,
            'SignatureValue': signature,
            'Culture': 'ru',
            'Encoding': 'utf-8',
            'IsTest': '1' if TESTING_MODE else '0',
            'ReturnUrl': ROBOKASSA_SUCCESS_URL,
            'CancelUrl': ROBOKASSA_FAIL_URL
        }

        url = f"https://auth.robokassa.ru/Merchant/Index.aspx?{urlencode(params)}"
        logger.info(f"Generated Robokassa link for user_id: {user_id_int}, inv_id: {inv_id}, url: {url}")

        return url
    except Exception as e:
        logger.error(f"Error in generate_robokassa_link for user_id {user_id}: {e}")
        raise

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboard_level1 = create_keyboard([
    ["üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "üÜï –ù–æ–≤—ã–π —á–∞—Ç"],
    ["üìä –û—Å—Ç–∞—Ç–æ–∫", "üíº –ü–æ–¥–ø–∏—Å–∫–∞"],
    ["‚ûï –ï—â–µ", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
])

keyboard_model_selection = create_keyboard([
    ["üß† GPT-4o", "üß† GPT-4o-mini"],
    ["üß† o1-mini"],
    ["üîô –ù–∞–∑–∞–¥"]
])

keyboard_tariff_selection = create_keyboard([
    ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
    ["üèÜ –ü—Ä–µ–º–∏—É–º"],
    ["üîô –ù–∞–∑–∞–¥"]
])

keyboard_tariff_info = create_keyboard([
    ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
    ["üèÜ –ü—Ä–µ–º–∏—É–º"],
    ["‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üîô –ù–∞–∑–∞–¥"]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    try:
        async with SessionLocal() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                initial_tokens = 500 if TESTING_MODE else 500
                new_user = User(user_id=message.from_user.id, tokens_balance=initial_tokens, tariff='–ë–∞–∑–æ–≤—ã–π')
                session.add(new_user)
                await session.commit()
                logger.info(f"Added new user {message.from_user.id} with initial tokens {initial_tokens}")
                await message.answer(
                    "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n"
                    "**–£ –≤–∞—Å –µ—Å—Ç—å 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.**\n"
                    "**–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å –±–æ–ª—å—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º [–¢–∞—Ä–∏—Ñ–∞–º](https://telegra.ph/Tarify-09-16) –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.**\n"
                    "**[–ù–∞—à–∞ –æ—Ñ–µ—Ä—Ç–∞](https://telegra.ph/Oferta-09-16)**\n"
                    "**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!**",
                    parse_mode="Markdown",
                    reply_markup=keyboard_level1
                )
            else:
                await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=keyboard_level1)
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@router.message(StateFilter(UserStates.selecting_tariff))
async def process_tariff_selection(message: Message, state: FSMContext):
    try:
        tariff = message.text
        logger.info(f"User {message.from_user.id} selected tariff: {tariff}")

        if tariff == "üîô –ù–∞–∑–∞–¥":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
            await state.clear()
            return

        if tariff == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
            info_message = (
                "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö:**\n\n"
                "üèÜ **–ü—Ä–µ–º–∏—É–º**:\n- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n- –í—Å–µ –º–æ–¥–µ–ª–∏\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n –°—Ç–æ–∏–º–æ—Å—Ç—å: 3 000 —Ä\n\n"
                "üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π**:\n- 2000 —Ç–æ–∫–µ–Ω–æ–≤\n- –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 500 —Ä\n\n"
                "üìâ **–ë–∞–∑–æ–≤—ã–π**:\n- 1000 —Ç–æ–∫–µ–Ω–æ–≤\n- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ FAQ\n –°—Ç–æ–∏–º–æ—Å—Ç—å:  300 —Ä"
            )
            await message.answer(info_message, parse_mode="Markdown", reply_markup=keyboard_tariff_info)
            return

        if tariff not in ["üìâ –ë–∞–∑–æ–≤—ã–π", "üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "üèÜ –ü—Ä–µ–º–∏—É–º"]:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
            await state.clear()
            return

        tariff_clean = tariff.split(' ')[-1]

        if TESTING_MODE:
            await initialize_user(message.from_user.id, tariff_clean)
            await message.answer(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_clean}.", reply_markup=keyboard_level1)
            await state.clear()
        else:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
            tariff_prices = {
                '–ë–∞–∑–æ–≤—ã–π': 3,        # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 15,
                '–ü—Ä–µ–º–∏—É–º': 30
            }
            out_sum = tariff_prices.get(tariff_clean, 0)
            description = f'–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_clean}'

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_link = await generate_robokassa_link(out_sum, tariff_clean, message.from_user.id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ **{tariff_clean}** –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({payment_link}).",
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=keyboard_level1
            )
            await state.clear()
    except Exception as e:
        logger.error(f"Error in process_tariff_selection for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.content_type == ContentType.TEXT)
async def handle_text(message: Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìä –û—Å—Ç–∞—Ç–æ–∫":
        await show_balance(message)
        return
    elif text == "üíº –ü–æ–¥–ø–∏—Å–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_selection)
        await state.set_state(UserStates.selecting_tariff)
        return
    elif text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @{SUPPORT_BOT_USERNAME}", reply_markup=keyboard_level1)
        return
    elif text == "‚ûï –ï—â–µ":
        await message.answer(
            "–û—Ñ–µ—Ä—Ç–∞: https://telegra.ph/Oferta-09-16",
            parse_mode="Markdown",
            reply_markup=keyboard_level1
        )
        return
    elif text == "üîç –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard_model_selection)
        await state.set_state(UserStates.selecting_model)
        return
    elif text == "üÜï –ù–æ–≤—ã–π —á–∞—Ç":
        await state.update_data(conversation=[])
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.", reply_markup=keyboard_level1)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    if current_state == UserStates.selecting_model.state:
        await handle_model_selection(message, state, text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ–ª—å
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or not user.has_selected_model:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=keyboard_model_selection)
            await state.set_state(UserStates.selecting_model)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
    access, error = await check_user_access(user_id)
    if not access:
        await handle_access_error(message, state, error)
        return

    # –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_triggers = [
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ", "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ",
        "—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ", "–º–Ω–µ –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–Ω–∞—Ä–∏—Å—É–π —Ñ–æ—Ç–æ", "–Ω–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–º–Ω–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞"
    ]
    if any(trigger in text.lower() for trigger in image_triggers):
        await handle_image_generation(message, state, text)
        return

    # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    await handle_chat_response(message, state)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def show_balance(message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested balance.")
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            logger.info(f"User {user_id} has tariff {user.tariff} and tokens {user.tokens_balance}")
            await message.answer(
                f"üì¶ **–¢–∞—Ä–∏—Ñ:** {user.tariff}\nüî¢ **–¢–æ–∫–µ–Ω—ã:** {user.tokens_balance}",
                parse_mode="Markdown",
                reply_markup=keyboard_level1
            )
        else:
            logger.error(f"User {user_id} not found in database.")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ.", reply_markup=keyboard_level1)

async def handle_access_error(message: Message, state: FSMContext, error_message: str):
    if error_message == "–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.":
        await message.answer("–í–∞—à –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_selection)
        await state.set_state(UserStates.selecting_tariff)
    else:
        await message.answer(error_message)

async def handle_model_selection(message: Message, state: FSMContext, model_name: str):
    user_id = message.from_user.id
    logger.info(f"User {user_id} is selecting model: {model_name}")
    if model_name == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard_level1)
        await state.clear()
        logger.info(f"User {user_id} returned to main menu.")
        return
    models = {"üß† GPT-4o": "gpt-4o", "üß† GPT-4o-mini": "gpt-4o-mini", "üß† o1-mini": "o1-mini"}
    if model_name not in models:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å.", reply_markup=keyboard_model_selection)
        logger.warning(f"User {user_id} selected an invalid model: {model_name}")
        return
    model_id = models[model_name]
    if model_id == "o1-mini":
        access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
        if not access:
            await message.answer("–ú–æ–¥–µ–ª—å 'o1-mini' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ '–ü—Ä–µ–º–∏—É–º'.", reply_markup=keyboard_tariff_selection)
            await state.set_state(UserStates.selecting_tariff)
            logger.warning(f"User {user_id} tried to select 'o1-mini' without Premium tariff.")
            return
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.model = model_id
            user.has_selected_model = 1
            await session.commit()
            logger.info(f"User {user_id} selected model {model_id}.")
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å {model_name}.", reply_markup=keyboard_level1)
    await state.clear()

async def handle_image_generation(message: Message, state: FSMContext, prompt: str):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        model_id = user.model if user else "o1-mini"
    if model_id == "o1-mini":
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ 'o1-mini'.", reply_markup=keyboard_level1)
        return
    access, error = await check_user_access(user_id, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
    if not access:
        await handle_access_error(message, state, error)
        return
    msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))
        response = await asyncio.to_thread(openai.Image.create, prompt=prompt, n=1, size="1024x1024", model="dall-e-3")
        animation.cancel()
        image_url = response['data'][0]['url']
        await msg.delete()
        await message.answer_photo(image_url, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, 100)
        logger.info(f"Generated image for user {user_id}: {image_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard_level1)

async def handle_chat_response(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    data = await state.get_data()
    logger.info(f"User {user_id} sent message: {text}")
    conversation = data.get('conversation', []) + [{"role": "user", "content": text}]
    conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation
    msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            model_id = user.model
            logger.info(f"User {user_id} is using model {model_id}")
        else:
            model_id = "o1-mini"
            logger.warning(f"User {user_id} not found, using default model 'o1-mini'")
    try:
        if model_id == "o1-mini":
            animation = asyncio.create_task(show_loading_animation(msg, "[–¥—É–º–∞—é]", dots=3, delay=0.7))
        else:
            animation = asyncio.create_task(show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"))
        response = await asyncio.to_thread(openai.ChatCompletion.create, model=model_id, messages=conversation_with_system)
        animation.cancel()
        reply = response['choices'][0]['message']['content']
        conversation.append({"role": "assistant", "content": reply})
        await state.update_data(conversation=conversation)
        await msg.delete()
        await message.answer(reply, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, response['usage']['total_tokens'])
        logger.info(f"Responded to user {user_id} with: {reply}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user {user_id}: {e}")
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=keyboard_level1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"User {user_id} sent a voice message.")

    access, error = await check_user_access(user_id, "–ü—Ä–µ–º–∏—É–º")
    if not access:
        await message.answer(
            "üîí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è '–ü—Ä–µ–º–∏—É–º'.",
            reply_markup=keyboard_tariff_selection
        )
        await state.set_state(UserStates.selecting_tariff)
        return

    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        tokens = user.tokens_balance if user else 0
    if tokens <= 0:
        await message.answer("‚ùå –¢–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard_tariff_selection)
        await state.set_state(UserStates.selecting_tariff)
        return

    msg = await message.answer("[—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ]")
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        logger.info(f"Voice file path: {file_path}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        voice_file = await bot.download_file(file_path)
        # voice_file is a BytesIO object
        voice_file.seek(0)
        voice_bytes = voice_file.read()
        logger.info(f"Downloaded voice message from user {user_id}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
        audio = AudioSegment.from_file(BytesIO(voice_bytes), format="ogg")
        wav_io = BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)
        wav_io.name = "temp_audio.wav"
        logger.info(f"Converted voice message to WAV for user {user_id}")

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        transcript = await asyncio.to_thread(openai.Audio.transcribe, "whisper-1", wav_io)
        recognized_text = transcript["text"]
        logger.info(f"Transcribed voice message from user {user_id}: {recognized_text}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        await show_loading_animation(msg, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
        data = await state.get_data()
        conversation = data.get('conversation', []) + [{"role": "user", "content": recognized_text}]
        conversation_with_system = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}] + conversation

        async with SessionLocal() as session:
            user = await session.get(User, user_id)
            model_id = user.model if user and user.model else "o1-mini"
            logger.info(f"User {user_id} is using model {model_id}")

        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model=model_id,
            messages=conversation_with_system
        )
        reply = response['choices'][0]['message']['content']
        conversation.append({"role": "assistant", "content": reply})
        await state.update_data(conversation=conversation)
        await msg.delete()
        await message.answer(reply, reply_markup=keyboard_level1)
        await update_tokens_balance(user_id, response['usage']['total_tokens'])
        logger.info(f"Responded to user {user_id} with: {reply}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await msg.delete()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=keyboard_level1)

async def main():
    await init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
